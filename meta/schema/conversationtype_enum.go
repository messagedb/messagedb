// generated by jsonenums -type=ConversationType -suffix=_enum; DO NOT EDIT

package schema

import (
	"encoding/json"
	"fmt"
)

var (
	_ConversationTypeNameToValue = map[string]ConversationType{
		"ConversationTypePrivate": ConversationTypePrivate,
		"ConversationTypeGroup":   ConversationTypeGroup,
		"ConversationTypeChannel": ConversationTypeChannel,
	}

	_ConversationTypeValueToName = map[ConversationType]string{
		ConversationTypePrivate: "ConversationTypePrivate",
		ConversationTypeGroup:   "ConversationTypeGroup",
		ConversationTypeChannel: "ConversationTypeChannel",
	}
)

func init() {
	var v ConversationType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ConversationTypeNameToValue = map[string]ConversationType{
			interface{}(ConversationTypePrivate).(fmt.Stringer).String(): ConversationTypePrivate,
			interface{}(ConversationTypeGroup).(fmt.Stringer).String():   ConversationTypeGroup,
			interface{}(ConversationTypeChannel).(fmt.Stringer).String(): ConversationTypeChannel,
		}
	}
}

// MarshalJSON is generated so ConversationType satisfies json.Marshaler.
func (r ConversationType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ConversationTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ConversationType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ConversationType satisfies json.Unmarshaler.
func (r *ConversationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ConversationType should be a string, got %s", data)
	}
	v, ok := _ConversationTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ConversationType %q", s)
	}
	*r = v
	return nil
}
