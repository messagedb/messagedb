// generated by jsonenums -type=RetentionMode -suffix=_enum; DO NOT EDIT

package schema

import (
	"encoding/json"
	"fmt"
)

var (
	_RetentionModeNameToValue = map[string]RetentionMode{
		"RetentionModeAll":  RetentionModeAll,
		"RetentionModeNone": RetentionModeNone,
		"RetentionModeAge":  RetentionModeAge,
		"RetentionModeDays": RetentionModeDays,
	}

	_RetentionModeValueToName = map[RetentionMode]string{
		RetentionModeAll:  "RetentionModeAll",
		RetentionModeNone: "RetentionModeNone",
		RetentionModeAge:  "RetentionModeAge",
		RetentionModeDays: "RetentionModeDays",
	}
)

func init() {
	var v RetentionMode
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RetentionModeNameToValue = map[string]RetentionMode{
			interface{}(RetentionModeAll).(fmt.Stringer).String():  RetentionModeAll,
			interface{}(RetentionModeNone).(fmt.Stringer).String(): RetentionModeNone,
			interface{}(RetentionModeAge).(fmt.Stringer).String():  RetentionModeAge,
			interface{}(RetentionModeDays).(fmt.Stringer).String(): RetentionModeDays,
		}
	}
}

// MarshalJSON is generated so RetentionMode satisfies json.Marshaler.
func (r RetentionMode) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RetentionModeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid RetentionMode: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so RetentionMode satisfies json.Unmarshaler.
func (r *RetentionMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RetentionMode should be a string, got %s", data)
	}
	v, ok := _RetentionModeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid RetentionMode %q", s)
	}
	*r = v
	return nil
}
